h1. Documentation

h2. Deployed application

p. "http://cold-frost-3484.herokuapp.com/":http://cold-frost-3484.herokuapp.com/

h2. Webservices:

p. All webservice return JSON Object

h3. User

h4. Authentificate user

p. This webservice request facebook with the accesstoken given by the client and retrieve information. It check in the database if the user exists and retrieves information (FBid, name, firstName, lastname). If the user doesn't exist, it automatically creates him.

* Success: If the access_token is correct, it return to the client FBid,name,firstName,lastname
* Error: If the access_token is not correct

p. @GET user/{access_token}@ _(GET http://cold-frost-3484.herokuapp.com/user/{access_token})_


p. Return
* Success

bc. {
"FBid":1125222192,
"name":"Thibault Durand",
"firstName":"Thibault",
"lastName":"Durand"
"email":"tibo.durand@gmail.com"
}

* Error

bc. {
    "error":{
            "message":"Invalid OAuth access token.",
            "type":"OAuthException"
            }
    }
    
    
h4. List accounts of the user

p. This web service retrieve the list of account the user is part of

p. @GET /user/account/all/{access_token}@

p. Return the list of accounts the user is part of : in this example, there is just one account call "NewAccount", and the user is "ADMIN".

bc. {
"listParticipationsToAccounts":[
{
"account":{
"currency":"euros",
"entityId":1,
"id":1,
"name":"NewAccount",
"persistent":true
},
"entityId":1,
"id":1,
"persistent":true,
"role":"ADMIN",
"status":"CONFIRMED"
}
]
}
    
h3. Account

h4. Create Account

p. This web service create an Account and send invite to participants

p. @POST account/@ 

p. Arguments :

* *access_token (required)* : Your facebook access_token
* *name (required)* : the name of the account
* *currency (required)* : the currency of the account (exemple: "euro")
* *emails* : the list of emails of the participants you want to invite

p. Return the account just created

For example: creation of an account "NewAccount" with 2 participants : test@gmail.com and truc@gmail.com

(_Arguments: access_token=AAAEFcJcBFwEBAPHM8Rz1x2L3sVaZAqrEBTPHIkMFr5&name=NewAccount&currency=euros&emails=test@gmail.com&emails=truc@gmail.com_)

bc. 
    {
    "creator":{
    "entityId":4,
    "id":4,
    "persistent":true,
    "role":"ADMIN",
    "status":"CONFIRMED",
    "user":{
    "FBid":1125222192,
    "email":null,
    "entityId":1,
    "firstName":"Thibault",
    "id":1,
    "lastName":"Durand",
    "name":"Thibault Durand",
    "persistent":true
    }
    },
    "currency":"euros",
    "entityId":3,
    "id":3,
    "listParticipants":[
    {
    "entityId":4,
    "id":4,
    "persistent":true,
    "role":"ADMIN",
    "status":"CONFIRMED",
    "user":{
    "FBid":1125222192,
    "email":null,
    "entityId":1,
    "firstName":"Thibault",
    "id":1,
    "lastName":"Durand",
    "name":"Thibault Durand",
    "persistent":true
    }
    },
    {
    "entityId":6,
    "id":6,
    "persistent":true,
    "role":"USER",
    "status":"PENDING",
    "user":{
    "FBid":0,
    "email":"test@gmail.com",
    "entityId":5,
    "firstName":null,
    "id":5,
    "lastName":null,
    "name":null,
    "persistent":true
    }
    },
    {
    "entityId":8,
    "id":8,
    "persistent":true,
    "role":"USER",
    "status":"PENDING",
    "user":{
    "FBid":0,
    "email":"truc@gmail.com",
    "entityId":7,
    "firstName":null,
    "id":7,
    "lastName":null,
    "name":null,
    "persistent":true
    }
    }
    ],
    "name":"NewAccount",
    "persistent":true
    }

h4. Delete Account:

p. Delete the account and all the expenses which are linked with. 

p. To work, it must be an user with role ADMIN on the account.

p. @GET account/{accountId}/delete/{access_token}@

p. Success:

bc. {"success":"Account delete"}

p. Errors:

bc. {"error":"This account doesn't exist"}
{"error":"Not allowed to delete an account if you're not ADMIN"}

h4. Confirm participation to an account

p. Change the status of the participant of an account: "PENDING" to "CONFIRMED".

p. @GET participationaccount/{participationaccountId}/confirm/{access_token}@

p. _NB: {participationaccountId} is the id you get when you call the webservice "List accounts of the user":_

p. Success: 

bc. {"success":"Participation confirmed"}

p. Errors:

bc. {"error":"Participation already confirmed"}
    {"error":"Not allowed to confirm"}
    {"error":"This participation doesn't exist"}
